f(200,-0.009,5)
f(4,1.012,15)
f <- function(N,r,t) return(N*exp(r*t))
f(4,1.012,15)
n<-function (N, r, t) return (N*exp(r*t))
n(1,1,1)
plot(rnorm(10), rnorm(10))
lx <-c(1, 0.3, 0.15, 0.09, 0.04, 0.01)
mx<- c(0, 2.0, 3.0, 3.0, 2.0, 0)
Ro <- lx %*% mx
lx <-c(1, 0.3, 0.15, 0.09, 0.04, 0.01)
mx<- c(0, 2.0, 3.0, 3.0, 2.0, 0)
Ro <- sum(c(lx*mx))
lx <-c(1, 0.3, 0.15, 0.09, 0.04, 0.01)
mx<- c(0, 2.0, 3.0, 3.0, 2.0, 0)
Ro <- sum(c(lx*mx))
print(Ro)
seq(0,100, .1)
setwd("C:/Users/Julia Smith/Desktop/BB_evolve/Simulations/analysis")
library(tidyverse)
conditions <- list.files("../to_store/")
library(tidyverse)
conditions <- list.files("../to_store/")
print(conditions[1])
library(tidyverse)
conditions <- list.files("../to_store/")
print(conditions[1])
lookup_table <- data.frame()
for (my_condition in conditions){
# split the string
my_split <- strsplit(my_condition, "_|\\=")[[1]]
# extract parameters
change_what <- my_split[1]
pos_interval <- NA
strat_interval <- NA
assign(paste0(change_what, "_interval"), as.numeric(my_split[2]))
is_scaled <- my_split[3]
init_strat <- my_split[4]
init_pos <- my_split[5]
male_dist <- as.numeric(my_split[6])
num_males <- as.numeric(my_split[7])
strategy <- as.numeric(my_split[3])
prob_maraud <- as.numeric(my_split[5])
dimension <- as.numeric(my_split[7])
repair <- as.numeric(my_split[9])
lookup_table <- rbind(lookup_table,
data.frame(directory=my_condition,
change_what=change_what,
pos_interval=pos_interval,
strat_interval=strat_interval,
is_scaled=is_scaled,
init_strat=init_strat,
init_pos=init_pos,
male_dist=male_dist,
num_males=num_males))
}
View(lookup_table)
Problem1 <- read.table(file= 'kong_mutation_data.txt', header=TRUE)
setwd("C:/Users/Julia Smith/Downloads")
Problem1 <- read.table(file= 'kong_mutation_data.txt', header=TRUE)
mean(Problem1$PatAge)
sd(Problem1$PatAge)
mean(Problem1$MatAge)
sd(Problem1$MatAge)
mean(Problem1$Mutations)
sd(Problem1$Mutations)
hist(Problem1$PatAge)
hist(Problem1$MatAge)
hist(Problem1$Mutations)
Problem1 <- read.table(file= 'kong_mutation_data.txt', header=TRUE)
mutations <-Problem1$Mutations
patage <- Problem1$PatAge
matage <- Problem1$MatAge
problem1 <-lm (mutations ~ patage, Problem1)
plot(mutations, patage)
curve(x*.45+1.8,min(patage),max(mutations),add=TRUE)
abline(problem1)
summary(problem1)
#I think that
# THIS IS A COMMENT. YOUR CODE GOES HERE
as.numeric("00")
setwd("C:/Users/Julia Smith/Desktop/BB_evolve/Simulations/analysis")
library(tidyverse)
conditions <- list.files("../to_store/")
lookup_table <- data.frame()
for (my_condition in conditions){
# split the string
my_split <- strsplit(my_condition, "_")[[1]] #|\\=
# extract parameters
change_what <- my_split[1]
pos_interval <- NA
strat_interval <- NA
assign(paste0(change_what, "_interval"), as.numeric(my_split[2]))
is_scaled <- my_split[3]
init_strat <- my_split[4]
init_pos <- my_split[5]
male_dist <- as.numeric(my_split[6])
num_males <- as.numeric(my_split[7])
strategy <- as.numeric(my_split[3])
prob_maraud <- as.numeric(my_split[5])
dimension <- as.numeric(my_split[7])
repair <- as.numeric(my_split[9])
lookup_table <- rbind(lookup_table,
data.frame(directory=my_condition,
change_what=change_what,
pos_interval=pos_interval,
strat_interval=strat_interval,
is_scaled=is_scaled,
init_strat=init_strat,
init_pos=init_pos,
male_dist=male_dist,
num_males=num_males))
}
library(tidyverse)
conditions <- list.files("../to_store/")
lookup_table <- data.frame()
for (my_condition in conditions){
# split the string
my_split <- strsplit(my_condition, "_")[[1]] #|\\=
# extract parameters
change_what <- my_split[1]
pos_interval <- NA
strat_interval <- NA
assign(paste0(change_what, "_interval"), as.numeric(my_split[2]))
is_scaled <- my_split[3]
init_strat <- my_split[4]
init_pos <- my_split[5]
male_dist <- as.numeric(my_split[6])
num_males <- as.numeric(my_split[7])
lookup_table <- rbind(lookup_table,
data.frame(directory=my_condition,
change_what=change_what,
pos_interval=pos_interval,
strat_interval=strat_interval,
is_scaled=is_scaled,
init_strat=init_strat,
init_pos=init_pos,
male_dist=male_dist,
num_males=num_males))
}
View(lookup_table)
all_results <- tibble()
for (my_condition in conditions){
# read and load each result
my_dir_results <- paste0("../to_store/", my_condition, "/results/")
my_results <- list.files(my_dir_results)
if (length(my_results) > 0){
# process a single file
for (my_file in my_results) {
# extract the random seed
#
# my_rnd_seed <- strsplit(substr(my_file, 5, 1000), "D")[[1]][1]
my_rnd_seed <- as.numeric(strsplit(my_file, "_")[[1]][2])
tmp <- read_csv(paste0(my_dir_results, my_file)) %>% add_column(rnd_seed = my_rnd_seed, directory = my_condition)
# tmp <- tmp %>% select(probability_maraud, successful_mating,
#                       foraging_hrs, staying_hrs, repairing_hrs, marauding_events, marauding_hrs, marauding_events, traveling_hrs, rnd_seed, directory)
all_results <- rbind(all_results, tmp)
}
}
}
all_results <- all_results %>% inner_join(lookup_table)
View(all_results)
View(all_results)
library(tidyverse)
conditions <- list.files("../to_store/")
lookup_table <- data.frame()
for (my_condition in conditions){
# split the string
my_split <- strsplit(my_condition, "_")[[1]] #|\\=
# extract parameters
change_what <- my_split[1]
pos_interval <- NA
strat_interval <- NA
assign(paste0(change_what, "_interval"), as.numeric(my_split[2]))
is_scaled <- my_split[3]
init_strat <- my_split[4]
init_pos <- my_split[5]
male_dist <- as.numeric(my_split[6])
num_males <- as.numeric(my_split[7])
lookup_table <- rbind(lookup_table,
data.frame(directory=my_condition,
change_what=change_what,
pos_interval=pos_interval,
strat_interval=strat_interval,
is_scaled=is_scaled,
init_strat=init_strat,
init_pos=init_pos,
male_dist=male_dist,
num_males=num_males))
}
all_results <- tibble()
for (my_condition in conditions){
# read and load each result
my_dir_results <- paste0("../to_store/", my_condition, "/results/")
my_results <- list.files(my_dir_results)
if (length(my_results) > 0){
# process a single file
for (my_file in my_results) {
# extract the random seed
#
# my_rnd_seed <- strsplit(substr(my_file, 5, 1000), "D")[[1]][1]
my_rnd_seed <- as.numeric(strsplit(my_file, "_")[[1]][2])
tmp <- read_csv(paste0(my_dir_results, my_file)) %>% add_column(rnd_seed = my_rnd_seed, directory = my_condition, is_selection=1)
all_results <- rbind(all_results, tmp)
}
}
}
for (my_condition in conditions){
# read and load each result
my_dir_nulls <- paste0("../to_store/", my_condition, "/nulls/")
my_nulls <- list.files(my_dir_nulls)
if (length(my_nulls) > 0){
# process a single file
for (my_file in my_nulls) {
# extract the random seed
#
# my_rnd_seed <- strsplit(substr(my_file, 5, 1000), "D")[[1]][1]
my_rnd_seed <- as.numeric(strsplit(my_file, "_")[[1]][2])
tmp <- read_csv(paste0(my_dir_nulls, my_file)) %>% add_column(rnd_seed = my_rnd_seed, directory = my_condition, is_selection=0)
all_results <- rbind(all_results, tmp)
}
}
}
all_results <- all_results %>% inner_join(lookup_table)
View(all_results)
library(tidyverse)
conditions <- list.files("../to_store/")
lookup_table <- data.frame()
for (my_condition in conditions){
# split the string
my_split <- strsplit(my_condition, "_")[[1]] #|\\=
# extract parameters
change_what <- my_split[1]
pos_interval <- NA
strat_interval <- NA
assign(paste0(change_what, "_interval"), as.numeric(my_split[2]))
is_scaled <- my_split[3]
init_strat <- my_split[4]
init_pos <- my_split[5]
male_dist <- as.numeric(my_split[6])
num_males <- as.numeric(my_split[7])
lookup_table <- rbind(lookup_table,
data.frame(directory=my_condition,
change_what=change_what,
pos_interval=pos_interval,
strat_interval=strat_interval,
is_scaled=is_scaled,
init_strat=init_strat,
init_pos=init_pos,
male_dist=male_dist,
num_males=num_males))
}
all_results <- tibble()
for (my_condition in conditions){
# read and load each result
my_dir_results <- paste0("../to_store/", my_condition, "/results/")
my_results <- list.files(my_dir_results)
if (length(my_results) > 0){
# process a single file
for (my_file in my_results) {
# extract the random seed
#
# my_rnd_seed <- strsplit(substr(my_file, 5, 1000), "D")[[1]][1]
my_rnd_seed <- as.numeric(strsplit(my_file, "_")[[1]][2])
tmp <- read_csv(paste0(my_dir_results, my_file), col_types = col_double()) %>% add_column(rnd_seed = my_rnd_seed, directory = my_condition, is_selection=1)
all_results <- rbind(all_results, tmp)
}
}
}
library(tidyverse)
conditions <- list.files("../to_store/")
lookup_table <- data.frame()
for (my_condition in conditions){
# split the string
my_split <- strsplit(my_condition, "_")[[1]] #|\\=
# extract parameters
change_what <- my_split[1]
pos_interval <- NA
strat_interval <- NA
assign(paste0(change_what, "_interval"), as.numeric(my_split[2]))
is_scaled <- my_split[3]
init_strat <- my_split[4]
init_pos <- my_split[5]
male_dist <- as.numeric(my_split[6])
num_males <- as.numeric(my_split[7])
lookup_table <- rbind(lookup_table,
data.frame(directory=my_condition,
change_what=change_what,
pos_interval=pos_interval,
strat_interval=strat_interval,
is_scaled=is_scaled,
init_strat=init_strat,
init_pos=init_pos,
male_dist=male_dist,
num_males=num_males))
}
all_results <- tibble()
for (my_condition in conditions){
# read and load each result
my_dir_results <- paste0("../to_store/", my_condition, "/results/")
my_results <- list.files(my_dir_results)
if (length(my_results) > 0){
# process a single file
for (my_file in my_results) {
# extract the random seed
#
# my_rnd_seed <- strsplit(substr(my_file, 5, 1000), "D")[[1]][1]
my_rnd_seed <- as.numeric(strsplit(my_file, "_")[[1]][2])
tmp <- read_csv(paste0(my_dir_results, my_file), col_types = cols(col_double())) %>% add_column(rnd_seed = my_rnd_seed, directory = my_condition, is_selection=1)
all_results <- rbind(all_results, tmp)
}
}
}
for (my_condition in conditions){
# read and load each result
my_dir_nulls <- paste0("../to_store/", my_condition, "/nulls/")
my_nulls <- list.files(my_dir_nulls)
if (length(my_nulls) > 0){
# process a single file
for (my_file in my_nulls) {
# extract the random seed
#
# my_rnd_seed <- strsplit(substr(my_file, 5, 1000), "D")[[1]][1]
my_rnd_seed <- as.numeric(strsplit(my_file, "_")[[1]][2])
tmp <- read_csv(paste0(my_dir_nulls, my_file), col_types = cols(col_double())) %>% add_column(rnd_seed = my_rnd_seed, directory = my_condition, is_selection=0)
all_results <- rbind(all_results, tmp)
}
}
}
all_results <- all_results %>% inner_join(lookup_table)
library(tidyverse)
conditions <- list.files("../to_store/")
lookup_table <- data.frame()
for (my_condition in conditions){
# split the string
my_split <- strsplit(my_condition, "_")[[1]] #|\\=
# extract parameters
change_what <- my_split[1]
pos_interval <- NA
strat_interval <- NA
assign(paste0(change_what, "_interval"), as.numeric(my_split[2]))
is_scaled <- my_split[3]
init_strat <- my_split[4]
init_pos <- my_split[5]
male_dist <- as.numeric(my_split[6])
num_males <- as.numeric(my_split[7])
lookup_table <- rbind(lookup_table,
data.frame(directory=my_condition,
change_what=change_what,
pos_interval=pos_interval,
strat_interval=strat_interval,
is_scaled=is_scaled,
init_strat=init_strat,
init_pos=init_pos,
male_dist=male_dist,
num_males=num_males))
}
all_results <- tibble()
for (my_condition in conditions){
# read and load each result
my_dir_results <- paste0("../to_store/", my_condition, "/results/")
my_results <- list.files(my_dir_results)
if (length(my_results) > 0){
# process a single file
for (my_file in my_results) {
# extract the random seed
#
# my_rnd_seed <- strsplit(substr(my_file, 5, 1000), "D")[[1]][1]
my_rnd_seed <- as.numeric(strsplit(my_file, "_")[[1]][2])
tmp <- read_csv(paste0(my_dir_results, my_file), col_types = cols()) %>% add_column(rnd_seed = my_rnd_seed, directory = my_condition, is_selection=1)
all_results <- rbind(all_results, tmp)
}
}
}
for (my_condition in conditions){
# read and load each result
my_dir_nulls <- paste0("../to_store/", my_condition, "/nulls/")
my_nulls <- list.files(my_dir_nulls)
if (length(my_nulls) > 0){
# process a single file
for (my_file in my_nulls) {
# extract the random seed
#
# my_rnd_seed <- strsplit(substr(my_file, 5, 1000), "D")[[1]][1]
my_rnd_seed <- as.numeric(strsplit(my_file, "_")[[1]][2])
tmp <- read_csv(paste0(my_dir_nulls, my_file), col_types = cols()) %>% add_column(rnd_seed = my_rnd_seed, directory = my_condition, is_selection=0)
all_results <- rbind(all_results, tmp)
}
}
}
all_results <- all_results %>% inner_join(lookup_table)
View(all_results)
#ideas: var in interbower distance over time, var in matings over time
pl <- ggplot(data = all_results) + aes(x = gen, y = var(successful_mating), size=is_selection, color = condition) + geom_line()
#ideas: var in interbower distance over time, var in matings over time
pl <- ggplot(data = all_results) + aes(x = gen, y = var(successful_mating), size=is_selection, color = condition) + geom_line()
pl
#ideas: var in interbower distance over time, var in matings over time
pl <- ggplot(data = all_results) + aes(x = gen, y = var(successful_mating), size=is_selection, color = directory) + geom_line()
pl
#ideas: var in interbower distance over time, var in matings over time
pl <- ggplot(data = all_results) + aes(x = gen, y = var(successful_mating), line_type=is_selection, color = directory) + geom_line()
pl
tib= tibble(
x = c(1:5,2:6,3:7,4:8),
y = c(rep(0, 5), rep(1,5), rep(2,5), rep(3,5))
)
p <- ggplot(data=tib) + aes(x=x, y=var(y)) + geom_line()
p
tib= tibble(
x = c(1:5,2:6,3:7,4:8),
y = c(rep(0, 5), rep(1,5), rep(2,5), rep(3,5))
)
p <- ggplot(data=tib) + aes(x=x, y=summarise(var(y),x)) + geom_line()
p
diamonds %>% group_by(cut) %>% summarise(mean = mean(depth))
tib = diamonds %>% group_by(cut) %>% summarise(mean = mean(depth))
View(tib)
mvovergen <- all_results %>% group_by(random_seed) %>% group_by(gen) %>% group_by(directory) %>% summarise(gen=gen, is_selection=is_selection, random_seed=random_seed, mate_var=var(successful_mating))
mvovergen <- all_results %>% group_by(rnd_seed) %>% group_by(gen) %>% group_by(directory) %>% summarise(gen=gen, is_selection=is_selection, rnd_seed=rnd_seed, mate_var=var(successful_mating))
mvovergen <- all_results %>% group_by(rnd_seed) %>% group_by(gen) %>% group_by(directory) %>% summarise( mate_var=var(successful_mating))
View(mvovergen)
mvovergen <- all_results %>% group_by(rnd_seed,gen,directory) %>% summarise(gen=gen, is_selection=is_selection, rnd_seed=rnd_seed, mate_var=var(successful_mating))
mvovergen <- all_results %>% group_by(rnd_seed,gen,directory) %>% summarise(mate_var=var(successful_mating))
View(mvovergen)
pl <- ggplot(data = mvovergen) + aes(x = gen, y = mate_var, line_type=is_selection, color = directory) + geom_line()
pl
mvovergen <- all_results %>% group_by(rnd_seed,gen,directory, is_selection) %>% summarise(mate_var=var(successful_mating))
pl <- ggplot(data = mvovergen) + aes(x = gen, y = mate_var, line_type=is_selection, color = directory) + geom_line()
pl
pl <- ggplot(data = mvovergen) + aes(x = gen, y = mate_var, line_type=is_selection, color = directory, alpha=rnd_seed) + geom_line()
pl
pl <- ggplot(data = mvovergen) + aes(x = gen, y = mate_var, line_type=is_selection, color = directory, alpha=rnd_seed) + geom_line(line_type=is_selection)
pl <- ggplot(data = mvovergen) + aes(x = gen, y = mate_var, linetype=is_selection, color = directory, alpha=rnd_seed) + geom_line()
pl
pl <- ggplot(data = mvovergen) + aes(x = gen, y = mate_var, linetype=as.factor(is_selection), color = directory, alpha=rnd_seed) + geom_line()
pl
pl <- ggplot(data = mvovergen) + aes(x = gen, y = mate_var, shape=as.factor(is_selection), color = directory, alpha=rnd_seed) + geom_line() +geom_point()
pl
pl <- ggplot(data = mvovergen) + aes(x = gen, y = mate_var, shape=as.factor(is_selection), color = directory, alpha=rnd_seed) +geom_point()
pl
scale = mvovergen %>% filter(directory==pos_0.1_1_All.VHigh_EvenTenthClumped_900_6)
scale = mvovergen %>% filter(directory=='pos_0.1_1_All.VHigh_EvenTenthClumped_900_6')
pl <- ggplot(data = scaled) + aes(x = gen, y = mate_var, color = is_selection, alpha=rnd_seed) +geom_point() + geom_line()
scaled = mvovergen %>% filter(directory=='pos_0.1_1_All.VHigh_EvenTenthClumped_900_6')
pl <- ggplot(data = scaled) + aes(x = gen, y = mate_var, color = is_selection, alpha=rnd_seed) +geom_point() + geom_line()
pl
pl <- ggplot(data = scaled) + aes(x = gen, y = mate_var, color = is_selection, alpha=rnd_seed) +geom_point() #+ geom_line()
pl
View(scaled)
lines(1:5, 1:5)
plot(1:5,1:5)
lines(1:5, 1:5)
plot(1:5,1:5)
lines(1:5, 2:6)
pl <- ggplot(data = scaled) + aes(x = gen, y = mate_var, group=group_by(rnd_seed,is_selection), color = as.factor(is_selection), alpha=rnd_seed) +geom_point() #+ geom_line()
pl
pl <- ggplot(data = scaled) + aes(x = gen, y = mate_var, group=interaction(rnd_seed,is_selection), color = as.factor(is_selection), alpha=rnd_seed) +geom_point() #+ geom_line()
pl
pl <- ggplot(data = scaled) + aes(x = gen, y = mate_var, group=interaction(rnd_seed,is_selection), color = as.factor(is_selection), alpha=rnd_seed) +geom_point() + geom_line()
pl
set.seed(0)
x <- rep(1:10, 4)
y <- c(rep(1:10, 2)+rnorm(20)/5, rep(6:15, 2) + rnorm(20)/5)
treatment <- gl(2, 20, 40, labels=letters[1:2])
replicate <- gl(2, 10, 40)
d <- data.frame(x=x, y=y, treatment=treatment, replicate=replicate)
ggplot(d, aes(x=x, y=y, colour=treatment, shape = replicate,
group=interaction(treatment, replicate))) +
geom_point() + geom_line()
View(d)
scaled = mvovergen %>% filter(directory=='pos_0.1_1_All.VHigh_EvenTenthClumped_900_6') %>% select(-directory)
pl <- ggplot(data = scaled) + aes(x = gen, y = mate_var, group=interaction(rnd_seed,is_selection), color = as.factor(is_selection), alpha=rnd_seed) + #geom_point() +
+geom_line()
pl <- ggplot(data = scaled) + aes(x = gen, y = mate_var, group=interaction(rnd_seed,is_selection), color = as.factor(is_selection), alpha=rnd_seed) +geom_line()
pl
pl <- ggplot(data = scaled) + aes(x = gen, y = mate_var, color = as.factor(is_selection), alpha=rnd_seed, group=interaction(rnd_seed,is_selection)) + geom_point + geom_line()
pl <- ggplot(data = scaled) + aes(x = gen, y = mate_var, color = as.factor(is_selection), alpha=rnd_seed, group=interaction(rnd_seed,is_selection)) + geom_point() + geom_line()
pl
pl <- ggplot(data = scaled) + aes(x = gen, y = mate_var, color = as.factor(is_selection), alpha=rnd_seed, group=interaction(rnd_seed,is_selection)) + geom_line()
pl
pl <- ggplot(data = scaled) + aes(x = gen, y = mate_var, color = as.factor(is_selection), alpha=.2, group=interaction(rnd_seed,is_selection)) + geom_line()
pl
pl <- ggplot(data = scaled) + aes(x = gen, y = mate_var, color = as.factor(is_selection), alpha=.1, group=interaction(rnd_seed,is_selection)) + geom_line()
pl
pl <- ggplot(data = scaled) + aes(x = gen, y = mate_var, color = as.factor(is_selection), group=interaction(rnd_seed,is_selection)) + geom_line( alpha=.1)
pl
pl <- ggplot(data = scaled) + aes(x = gen, y = mate_var, color = as.factor(is_selection), group=interaction(rnd_seed,is_selection)) + geom_line( alpha=.2)
pl
View(mvovergen)
pl <- ggplot(data = scaled%>%filter(is_selection==1)) + aes(x = gen, y = mate_var) + geom_point()# , color = as.factor(is_selection), group=interaction(rnd_seed,is_selection)) + geom_line( alpha=.2)
pl
pl <- ggplot(data = scaled%>%filter(is_selection==1)) + aes(x = gen, y = mate_var, alpha=.2) + geom_point()# , color = as.factor(is_selection), group=interaction(rnd_seed,is_selection)) + geom_line( alpha=.2)
pl
pl <- ggplot(data = scaled%>%filter(is_selection==1)) + aes(x = gen, y = mate_var, color= "blue", alpha=.2) + geom_point()# , color = as.factor(is_selection), group=interaction(rnd_seed,is_selection)) + geom_line( alpha=.2)
pl
pl <- ggplot(data = scaled%>%filter(is_selection==1)) + aes(x = gen, y = mate_var, color= col("blue"), alpha=.2) + geom_point()# , color = as.factor(is_selection), group=interaction(rnd_seed,is_selection)) + geom_line( alpha=.2)
pl
pl <- ggplot(data = scaled%>%filter(is_selection==1)) + aes(x = gen, y = mate_var, color= color("blue"), alpha=.2) + geom_point()# , color = as.factor(is_selection), group=interaction(rnd_seed,is_selection)) + geom_line( alpha=.2)
pl
pl <- ggplot(data = scaled%>%filter(is_selection==1)) + aes(x = gen, y = mate_var, alpha=.2) + geom_point()# , color = as.factor(is_selection), group=interaction(rnd_seed,is_selection)) + geom_line( alpha=.2)
pl
model<-lm(mate_var~gen,data = scaled%>%filter(is_selection==1))
summary(model)
dat <-scaled%>%filter(is_selection==1)
model<-lm(mate_var~gen,data = dat)
summary(model)
dat <-scaled%>%filter(is_selection==1)
model<-lm(mate_var~gen,data = dat)
summary(model)
#significantly negative slope -- mating success variance is going down with generations *slightly*
View(dat)
